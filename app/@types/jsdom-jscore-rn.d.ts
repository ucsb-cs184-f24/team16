/** Declaration file generated by dts-gen */

declare module 'jsdom-jscore-rn' {
  import AttributeList = module
  export const debugMode: boolean;

  export const dom: {
    level3: {
      core: {
        Attr: Attr;
        AttributeList: AttributeList;
        CDATASection: CDATASection;
        CharacterData: CharacterData;
        Comment: Comment;
        DOMConfiguration: DOMConfiguration;
        DOMError: DOMError;
        DOMException: DOMException;
        DOMImplementation: DOMImplementation;
        DOMSTRING_SIZE_ERR: number;
        DOMStringList: DOMStringList;
        Document: Document;
        DocumentFragment: DocumentFragment;
        DocumentType: DocumentType;
        Element: Element;
        Entity: Entity;
        EntityNodeMap: EntityNodeMap;
        EntityReference: EntityReference;
        HIERARCHY_REQUEST_ERR: number;
        INDEX_SIZE_ERR: number;
        INUSE_ATTRIBUTE_ERR: number;
        INVALID_ACCESS_ERR: number;
        INVALID_CHARACTER_ERR: number;
        INVALID_MODIFICATION_ERR: number;
        INVALID_STATE_ERR: number;
        NAMESPACE_ERR: number;
        NOT_FOUND_ERR: number;
        NOT_SUPPORTED_ERR: number;
        NO_DATA_ALLOWED_ERR: number;
        NO_MODIFICATION_ALLOWED_ERR: number;
        NamedNodeMap: NamedNodeMap;
        Node: Node;
        NodeList: NodeList;
        Notation: Notation;
        NotationNodeMap: NotationNodeMap;
        ProcessingInstruction: ProcessingInstruction;
        SYNTAX_ERR: number;
        TYPE_MISMATCH_ERR: number;
        Text: Text;
        UserDataHandler: UserDataHandler;
        VALIDATION_ERR: number;
        WRONG_DOCUMENT_ERR: number;
        XPathEvaluator: XPathEvaluator;
        XPathException: XPathException;
        XPathExpression: XPathExpression;
        XPathResult: XPathResult;
        exceptionMessages: {
          "1": string;
          "10": string;
          "2": string;
          "3": string;
          "4": string;
          "5": string;
          "6": string;
          "7": string;
          "8": string;
          "9": string;
          NAMESPACE_ERR: string;
        };
        mapDOMNodes: any;
        mapper: any;
        markTreeReadonly: any;
        visitTree: any;
      };
      html: {
        Attr: Attr;
        AttributeList: AttributeList;
        CDATASection: CDATASection;
        CharacterData: CharacterData;
        Comment: Comment;
        DOMException: DOMException;
        DOMImplementation: DOMImplementation;
        DOMSTRING_SIZE_ERR: number;
        Document: Document;
        DocumentFragment: DocumentFragment;
        DocumentType: DocumentType;
        Element: Element;
        Entity: Entity;
        EntityNodeMap: EntityNodeMap;
        EntityReference: EntityReference;
        HIERARCHY_REQUEST_ERR: number;
        HTMLAnchorElement: HTMLAnchorElement;
        HTMLAppletElement: HTMLAppletElement;
        HTMLAreaElement: HTMLAreaElement;
        HTMLBRElement: HTMLBRElement;
        HTMLBaseElement: HTMLBaseElement;
        HTMLBaseFontElement: HTMLBaseFontElement;
        HTMLBodyElement: HTMLBodyElement;
        HTMLButtonElement: HTMLButtonElement;
        HTMLCanvasElement: HTMLCanvasElement;
        HTMLCollection: HTMLCollection;
        HTMLDListElement: HTMLDListElement;
        HTMLDirectoryElement: HTMLDirectoryElement;
        HTMLDivElement: HTMLDivElement;
        HTMLDocument: HTMLDocument;
        HTMLElement: HTMLElement;
        HTMLFieldSetElement: HTMLFieldSetElement;
        HTMLFontElement: HTMLFontElement;
        HTMLFormElement: HTMLFormElement;
        HTMLFrameElement: HTMLFrameElement;
        HTMLFrameSetElement: HTMLFrameSetElement;
        HTMLHRElement: HTMLHRElement;
        HTMLHeadElement: HTMLHeadElement;
        HTMLHeadingElement: HTMLHeadingElement;
        HTMLHtmlElement: HTMLHtmlElement;
        HTMLIFrameElement: HTMLIFrameElement;
        HTMLImageElement: HTMLImageElement;
        HTMLInputElement: HTMLInputElement;
        HTMLIsIndexElement: HTMLIsIndexElement;
        HTMLLIElement: HTMLLIElement;
        HTMLLabelElement: HTMLLabelElement;
        HTMLLegendElement: HTMLLegendElement;
        HTMLLinkElement: HTMLLinkElement;
        HTMLMapElement: HTMLMapElement;
        HTMLMenuElement: HTMLMenuElement;
        HTMLMetaElement: HTMLMetaElement;
        HTMLModElement: HTMLModElement;
        HTMLOListElement: HTMLOListElement;
        HTMLObjectElement: HTMLObjectElement;
        HTMLOptGroupElement: HTMLOptGroupElement;
        HTMLOptionElement: HTMLOptionElement;
        HTMLOptionsCollection: HTMLOptionsCollection;
        HTMLParagraphElement: HTMLParagraphElement;
        HTMLParamElement: HTMLParamElement;
        HTMLPreElement: HTMLPreElement;
        HTMLQuoteElement: HTMLQuoteElement;
        HTMLScriptElement: HTMLScriptElement;
        HTMLSelectElement: HTMLSelectElement;
        HTMLStyleElement: HTMLStyleElement;
        HTMLTableCaptionElement: HTMLTableCaptionElement;
        HTMLTableCellElement: HTMLTableCellElement;
        HTMLTableColElement: HTMLTableColElement;
        HTMLTableElement: HTMLTableElement;
        HTMLTableRowElement: HTMLTableRowElement;
        HTMLTableSectionElement: HTMLTableSectionElement;
        HTMLTextAreaElement: HTMLTextAreaElement;
        HTMLTitleElement: HTMLTitleElement;
        HTMLUListElement: HTMLUListElement;
        INDEX_SIZE_ERR: number;
        INUSE_ATTRIBUTE_ERR: number;
        INVALID_ACCESS_ERR: number;
        INVALID_CHARACTER_ERR: number;
        INVALID_MODIFICATION_ERR: number;
        INVALID_STATE_ERR: number;
        NAMESPACE_ERR: number;
        NOT_FOUND_ERR: number;
        NOT_SUPPORTED_ERR: number;
        NO_DATA_ALLOWED_ERR: number;
        NO_MODIFICATION_ALLOWED_ERR: number;
        NamedNodeMap: NamedNodeMap;
        Node: Node;
        NodeList: NodeList;
        Notation: Notation;
        NotationNodeMap: NotationNodeMap;
        ProcessingInstruction: ProcessingInstruction;
        SYNTAX_ERR: number;
        Text: Text;
        WRONG_DOCUMENT_ERR: number;
        exceptionMessages: {
          "1": string;
          "10": string;
          "2": string;
          "3": string;
          "4": string;
          "5": string;
          "6": string;
          "7": string;
          "8": string;
          "9": string;
          NAMESPACE_ERR: string;
        };
        languageProcessors: {};
        mapDOMNodes: any;
        mapper: any;
        markTreeReadonly: any;
        resourceLoader: {
          baseUrl: any;
          resolve: any;
        };
        visitTree: any;
      };
      xpath: {
        Evaluator: Evaluator;
        Stream: Stream;
        XPathEvaluator: XPathEvaluator;
        XPathException: XPathException;
        XPathExpression: XPathExpression;
        XPathResult: XPathResult;
        axes: {
          ancestor: any;
          "ancestor-or-self": any;
          attribute: any;
          child: any;
          descendant: any;
          "descendant-or-self": any;
          following: any;
          "following-sibling": any;
          namespace: any;
          parent: any;
          preceding: any;
          "preceding-sibling": any;
          self: any;
        };
        evaluate: any;
        nodeTypes: {
          attribute: number;
          comment: number;
          element: number;
          node: number;
          "processing-instruction": number;
          text: number;
        };
        parse: any;
        sortUniqDocumentOrder: any;
        stringifyObject: any;
      };
    };
    ls: {
      DOMImplementationLS: DOMImplementationLS;
      LSException: LSException;
      LSInput: LSInput;
      LSOutput: LSOutput;
      LSParser: LSParser;
      LSParserFilter: LSParserFilter;
      LSResourceResolver: LSResourceResolver;
      LSSerializer: LSSerializer;
      LSSerializerFilter: LSSerializerFilter;
    };
  };

  export const version: number;

  export function browserAugmentation(dom: Document, options?: object): Document;

  export function env(html: string, level?: number, callback?: any, ...args?: any[]): void;

  export function html(html: string, level?: number, options?: object): Document;

  export function jsdom(html: string, level?: number, options?: object): Document;

  export function level(level: number, feature: any): any;

  export namespace defaultLevel {
    class Attr {
      constructor(document: Document, name: string, value: any);

      appendChild(arg: Element): any;

      insertBefore(newChild: Element, refChild: Element): any;

    }

    class AttributeList {
      constructor(document: Document, parentNode: Node);

      $getNoNS(name: string): any;

      $getNode(namespace: string, localName: string): any;

      $remove(namespace: string, localName: string): any;

      $removeNoNS(name: string): any;

      $removeNode(attr: Attr): any;

      $set(localName: any, value: any, name: string, prefix: any, namespace: any): void;

      $setNoNS(name: string, value: any): void;

      $setNode(attr: Attr): any;

      getNamedItem(name: string): any;

      getNamedItemNS(namespaceURI: any, localName: any): any;

      item(i: any): any;

      removeNamedItem(name: string): any;

      removeNamedItemNS(namespaceURI: any, localName: any): any;

      setNamedItem(attr: Attr): any;

      setNamedItemNS(attr: Attr): any;

    }

    class CDATASection {
      constructor(document: Document, value: any);

    }

    class CharacterData {
      constructor(document: Document, value: any);

      appendData(arg: any): any;

      deleteData(offset: any, count: any): void;

      insertData(offset: any, arg: any): void;

      replaceData(offset: any, count: any, arg: any): void;

      substringData(offset: any, count: any): any;

    }

    class Comment {
      constructor(document: Document, text: any);

    }

    class DOMException {
      constructor(code: any, message: any);

      static DOMSTRING_SIZE_ERR: number;

      static HIERARCHY_REQUEST_ERR: number;

      static INDEX_SIZE_ERR: number;

      static INUSE_ATTRIBUTE_ERR: number;

      static INVALID_CHARACTER_ERR: number;

      static NOT_FOUND_ERR: number;

      static NOT_SUPPORTED_ERR: number;

      static NO_DATA_ALLOWED_ERR: number;

      static NO_MODIFICATION_ALLOWED_ERR: number;

      static WRONG_DOCUMENT_ERR: number;

    }

    class DOMImplementation {
      constructor(document: Document, features: any);

      addFeature(feature: any, version: any): void;

      createDocument(namespaceURI: any, qualifiedName: any, doctype: any): any;

      createDocumentType(qualifiedName: any, publicId: any, systemId: any): any;

      createLSInput(): any;

      createLSOutput(): any;

      createLSParser(mode: any, schemaType: any): any;

      createLSSerializer(): any;

      getFeature(feature: any, version: any): void;

      hasFeature(feature: any, version: any): any;

      removeFeature(feature: any, version: any): void;

    }

    class Document {
      constructor(options?: object);

      appendChild(arg: any): any;

      createAttribute(name: string): any;

      createAttributeNS(namespaceURI: any, qualifiedName: any): any;

      createCDATASection(data: any): any;

      createComment(data: any): any;

      createDocumentFragment(): any;

      createElement(tagName: string): any;

      createElementNS(namespaceURI: any, qualifiedName: any): any;

      createEntityNode(name: string, ...args: any[]): any;

      createEntityReference(name: string): any;

      createExpression(expression: any, resolver: any): any;

      createNSResolver(nodeResolver: any): void;

      createNotationNode(name: string, publicId: any, systemId: any, ...args: any[]): any;

      createProcessingInstruction(target: any, data: any): any;

      createTextNode(data: any): any;

      evaluate(expression: any, contextNode: any, resolver: any, type: any, result: any): any;

      getElementById(id: any): any;

      getElementsByTagName(name: string): any;

      getElementsByTagNameNS(namespaceURI: any, localName: any): any;

      importNode(importedNode: any, deep: any): any;

      removeChild(arg: any): any;

      static getFeature(): any;

    }

    class DocumentFragment {
      constructor(document: Document);

    }

    class DocumentType {
      constructor(document: Document, name: string, entities: any, notations: any, attributes: any);

    }

    class Element {
      constructor(document: Document, tagName: string);

      getAttribute(name: string): any;

      getAttributeNS(namespaceURI: any, localName: any): any;

      getAttributeNode(name: string): any;

      getAttributeNodeNS(namespaceURI: any, localName: any): any;

      getElementsByTagName(name: string): any;

      getElementsByTagNameNS(namespaceURI: any, localName: any): any;

      hasAttribute(name: string): any;

      hasAttributeNS(namespaceURI: any, localName: any): any;

      removeAttribute(name: string): any;

      removeAttributeNS(namespaceURI: any, localName: any): void;

      removeAttributeNode(oldAttr: any): any;

      setAttribute(name: string, value: any): void;

      setAttributeNS(namespaceURI: any, qualifiedName: any, value: any): void;

      setAttributeNode(newAttr: any): any;

      setAttributeNodeNS(newAttr: any): any;

    }

    class Entity {
      constructor(document: Document, name: string);

    }

    class EntityReference {
      constructor(document: Document, entity: any);

    }

    class HTMLAnchorElement {
      constructor(document: Document, name: string);

    }

    class HTMLAppletElement {
      constructor(document: Document, name: string);

    }

    class HTMLAreaElement {
      constructor(document: Document, name: string);

    }

    class HTMLBRElement {
      constructor(document: Document, name: string);

    }

    class HTMLBaseElement {
      constructor(document: Document, name: string);

    }

    class HTMLBaseFontElement {
      constructor(document: Document, name: string);

    }

    class HTMLBodyElement {
      constructor(document: Document, name: string);

    }

    class HTMLButtonElement {
      constructor(document: Document, name: string);

    }

    class HTMLCanvasElement {
      constructor(document: Document, name: string);

    }

    class HTMLCollection {
      constructor(element: any, query: string);

      namedItem(name: string): any;

      toString(): any;

    }

    class HTMLDListElement {
      constructor(document: Document, name: string);

    }

    class HTMLDirectoryElement {
      constructor(document: Document, name: string);

    }

    class HTMLDivElement {
      constructor(document: Document, name: string);

    }

    class HTMLDocument {
      constructor(options?: object);

      close(): void;

      getElementsByName(elementName: string): any;

      open(): void;

      write(text: any): void;

      writeln(text: any): void;

    }

    class HTMLElement {
      constructor(document: Document, name: string);

      getBoundingClientRect(): any;

    }

    class HTMLFieldSetElement {
      constructor(document: Document, name: string);

    }

    class HTMLFontElement {
      constructor(document: Document, name: string);

    }

    class HTMLFormElement {
      constructor(document: Document, name: string);

      reset(): void;

    }

    class HTMLFrameElement {
      constructor(document: Document, name: string);

    }

    class HTMLFrameSetElement {
      constructor(document: Document, name: string);

    }

    class HTMLHRElement {
      constructor(document: Document, name: string);

    }

    class HTMLHeadElement {
      constructor(document: Document, name: string);

    }

    class HTMLHeadingElement {
      constructor(document: Document, name: string);

    }

    class HTMLHtmlElement {
      constructor(document: Document, name: string);

    }

    class HTMLIFrameElement {
      constructor(document: Document, name: string);

    }

    class HTMLImageElement {
      constructor(document: Document, name: string);

    }

    class HTMLInputElement {
      constructor(document: Document, name: string);

    }

    class HTMLIsIndexElement {
      constructor(document: Document, name: string);

    }

    class HTMLLIElement {
      constructor(document: Document, name: string);

    }

    class HTMLLabelElement {
      constructor(document: Document, name: string);

    }

    class HTMLLegendElement {
      constructor(document: Document, name: string);

    }

    class HTMLLinkElement {
      constructor(document: Document, name: string);

    }

    class HTMLMapElement {
      constructor(document: Document, name: string);

    }

    class HTMLMenuElement {
      constructor(document: Document, name: string);

    }

    class HTMLMetaElement {
      constructor(document: Document, name: string);

    }

    class HTMLModElement {
      constructor(document: Document, name: string);

    }

    class HTMLOListElement {
      constructor(document: Document, name: string);

    }

    class HTMLObjectElement {
      constructor(document: Document, name: string);

    }

    class HTMLOptGroupElement {
      constructor(document: Document, name: string);

    }

    class HTMLOptionElement {
      constructor(document: Document, name: string);

    }

    class HTMLOptionsCollection {
      constructor(element: any, query: string);

      namedItem(name: string): any;

      toString(): any;

    }

    class HTMLParagraphElement {
      constructor(document: Document, name: string);

    }

    class HTMLParamElement {
      constructor(document: Document, name: string);

    }

    class HTMLPreElement {
      constructor(document: Document, name: string);

    }

    class HTMLQuoteElement {
      constructor(document: Document, name: string);

    }

    class HTMLScriptElement {
      constructor(document: Document, name: string);

    }

    class HTMLSelectElement {
      constructor(document: Document, name: string);

      add(opt: any, before: any): void;

      remove(index: number): void;

    }

    class HTMLStyleElement {
      constructor(document: Document, name: string);

    }

    class HTMLTableCaptionElement {
      constructor(document: Document, name: string);

    }

    class HTMLTableCellElement {
      constructor(document: Document, name: string);

    }

    class HTMLTableColElement {
      constructor(document: Document, name: string);

    }

    class HTMLTableElement {
      constructor(document: Document, name: string);

      createCaption(): any;

      createTFoot(): any;

      createTHead(): any;

      deleteCaption(): void;

      deleteRow(index: number): void;

      deleteTFoot(): void;

      deleteTHead(): void;

      insertRow(index: number): any;

    }

    class HTMLTableRowElement {
      constructor(document: Document, name: string);

      deleteCell(index: number): void;

      insertCell(index: number): any;

    }

    class HTMLTableSectionElement {
      constructor(document: Document, name: string);

      deleteRow(index: number): void;

      insertRow(index: number): any;

    }

    class HTMLTextAreaElement {
      constructor(document: Document, name: string);

    }

    class HTMLTitleElement {
      constructor(document: Document, name: string);

    }

    class HTMLUListElement {
      constructor(document: Document, name: string);

    }

    class NamedNodeMap {
      constructor(document: Document);

      exists(name: string): any;

      getNamedItem(name: string): any;

      getNamedItemNS(namespaceURI: any, localName: any): any;

      item(index: number): any;

      removeNamedItem(name: string): any;

      removeNamedItemNS(namespaceURI: any, localName: any): any;

      setNamedItem(arg: any): any;

      setNamedItemNS(arg: any): any;

    }

    class Node {
      constructor(ownerDocument: any);

      appendChild(newChild: any): any;

      cloneNode(deep: any, fn: any): any;

      compareDocumentPosition(otherNode: any): any;

      getUserData(key: any): any;

      hasAttributes(): any;

      hasChildNodes(): any;

      insertBefore(newChild: any, refChild: any): any;

      isEqualNode(other: any, ...args: any[]): any;

      isSameNode(other: any): any;

      isSupported(feature: any, version: any): any;

      normalize(): void;

      raise(type: any, message: any, data: any): void;

      removeChild(oldChild: any): any;

      replaceChild(newChild: any, oldChild: any): any;

      setUserData(key: any, data: any, handler: any): any;

      toString(): any;

      static ATTRIBUTE_NODE: number;

      static CDATA_SECTION_NODE: number;

      static COMMENT_NODE: number;

      static DOCUMENT_FRAGMENT_NODE: number;

      static DOCUMENT_NODE: number;

      static DOCUMENT_TYPE_NODE: number;

      static ELEMENT_NODE: number;

      static ENTITY_NODE: number;

      static ENTITY_REFERENCE_NODE: number;

      static NOTATION_NODE: number;

      static PROCESSING_INSTRUCTION_NODE: number;

      static TEXT_NODE: number;

    }

    class NodeList {
      constructor(element: any, query: string);

      item(index: number): any;

      toString(): any;

    }

    class Notation {
      constructor(document: Document, name: string, publicId: any, systemId: any);

    }

    class ProcessingInstruction {
      constructor(document: Document, target: any, data: any);

    }

    class Text {
      constructor(document: Document, text: any, readonly: any);

      splitText(offset: any): any;

      toString(): any;

    }

    const DOMSTRING_SIZE_ERR: number;

    const HIERARCHY_REQUEST_ERR: number;

    const INDEX_SIZE_ERR: number;

    const INUSE_ATTRIBUTE_ERR: number;

    const INVALID_ACCESS_ERR: number;

    const INVALID_CHARACTER_ERR: number;

    const INVALID_MODIFICATION_ERR: number;

    const INVALID_STATE_ERR: number;

    const NAMESPACE_ERR: number;

    const NOT_FOUND_ERR: number;

    const NOT_SUPPORTED_ERR: number;

    const NO_DATA_ALLOWED_ERR: number;

    const NO_MODIFICATION_ALLOWED_ERR: number;

    const SYNTAX_ERR: number;

    const WRONG_DOCUMENT_ERR: number;

    const exceptionMessages: {
      "1": string;
      "10": string;
      "2": string;
      "3": string;
      "4": string;
      "5": string;
      "6": string;
      "7": string;
      "8": string;
      "9": string;
      NAMESPACE_ERR: string;
    };

    const languageProcessors: {};

    function EntityNodeMap(document: Document, ...args: any[]): void;

    function NotationNodeMap(document: Document, ...args: any[]): void;

    function mapDOMNodes(parent: any, recursive: any, callback: any): any;

    function mapper(parent: any, filter: any, recursive: any): any;

    function markTreeReadonly(node: any): void;

    function visitTree(root: any, callback: any): void;

    namespace resourceLoader {
      function baseUrl(document: Document): any;

      function resolve(document: Document, href: any): any;

    }

  }
}
